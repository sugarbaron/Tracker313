/*! \file clockunit.h
 *  \brief описание работы системных часов
 *  \author sugarbaron ([sugarbaron_bicycles] e-mail: sugarbaron1@mail.ru)
 *  \date 21.04.2016
 */
#ifndef CLOCKUNIT_H
#define CLOCKUNIT_H

#include "clock.h"
#include "exception.h"
#include <QObject>
#include <QTCore>
#include <QScopedPointer>

/*! \class ClockUnit
 *  \brief класс описывает работу системных часов
 *
 * принцип работы:
 * 01.значение системного времени хранится в поле класса
 * 02.есть методы установки и считывания значения системного времени
 * 03.доступ к полю системного времени защищён мютексом
 * 04.класс содержит таймер, срабатывающий с заданным интервалом
 * 05.класс содержит интервал, определяющий период срабатывания таймера
 * 06.каждое срабатывание таймера вызывает метод, увеличивающий значение
 *    системного времени на интервал срабатывания таймера
 * 07.синхронизация значения системного времени с базой производится
 *    посредством вызова метода установки значения системного времени
 *    из класса, обеспечивающего взаимодействие с базой.
 * 08.класс является синглтоном
 */
class ClockUnit: public QObject, public Clock
{
  Q_OBJECT
  private:
    //секция_данных____________________________________________________________
    ///////////////////////////////////////////////////////////////////////////
    /// величина интервала между соседними тиками таймера (в миллисекундах)
    static const quint32 TIMER_TICK = 1000;
    
    /// указатель на экземпляр этого класса (паттерн singletone)
    static QScopedPointer<ClockUnit> _instance;
    /// системное время, синхронизируемое с базой
    QScopedPointer<QDateTime> _time;
    /// мютекс для защиты _time
    QScopedPointer<QMutex> _timeLocker;
    /// мютекс для защиты msThreadSleep()
    QScopedPointer<QMutex> _sleepLocker;
    /// указатель на таймер, тикающий раз в TIMER_TICK миллисекунд
    QScopedPointer<QTimer> _ticktacker;

    //секция_конструкторов(деструкторов)_______________________________________
    ///////////////////////////////////////////////////////////////////////////
    ClockUnit();
  public:
    virtual ~ClockUnit();

    //секция_вспомогатльных_инструментов_______________________________________
    ///////////////////////////////////////////////////////////////////////////
  private:
    /*! \brief стартануть часы
     */
    void start();

  public:
    //секция_основного_назначения______________________________________________
    ///////////////////////////////////////////////////////////////////////////
    /*! \brief получить указатель на экземпляр этого класса (паттерн singletone)
     *
     *  \return указатель на экземпляр этого класса
     */
    static ClockUnit* create();

    /*! \brief получить значение системного времени
     *
     *  \return значение системного времени
     */
    QDateTime getTime() const;

    /*! \brief установить значение системного времени
     *
     *  \param  значение системного времени для установки
     *
     *  \throws NeedFixCode  если аргумент не валидный
     */
    void setTime(const QDateTime& newValue);

    /*!
     * \brief метод приостанавливающий выполнение потока на заданное время
     *
     * \param время в мс на которое необходимо приостановить выполнение
     */
    void msThreadSleep(quint32 ms) const;

  private slots:
    /*! \brief инкрементировать время и дату на TIMER_TICK миллисекунд */
    void incrementTime();
};

#endif // CLOCKUNIT_H
